<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://maodinghuan.github.io</id>
    <title>Gridea</title>
    <updated>2020-09-18T00:34:30.474Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://maodinghuan.github.io"/>
    <link rel="self" href="https://maodinghuan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://maodinghuan.github.io/images/avatar.png</logo>
    <icon>https://maodinghuan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://maodinghuan.github.io/post/hello-gridea/</id>
        <link href="https://maodinghuan.github.io/post/hello-gridea/">
        </link>
        <updated>2020-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...<br>
hello 今天已经是我上班第N天了  哈哈....<br>
实在是无聊  这才想起来  想写博客了<br>
其实想写博客很久了....en<br>
不说了 摸鱼久了  被老板发现  要带我去爬山了....<br>
以后持续跟新....</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...<br>
hello 今天已经是我上班第N天了  哈哈....<br>
实在是无聊  这才想起来  想写博客了<br>
其实想写博客很久了....en<br>
不说了 摸鱼久了  被老板发现  要带我去爬山了....<br>
以后持续跟新....</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[100 个网络基础知识普及，看完成半个网络高手]]></title>
        <id>https://maodinghuan.github.io/post/100-ge-wang-luo-ji-chu-zhi-shi-pu-ji-kan-wan-cheng-ban-ge-wang-luo-gao-shou/</id>
        <link href="https://maodinghuan.github.io/post/100-ge-wang-luo-ji-chu-zhi-shi-pu-ji-kan-wan-cheng-ban-ge-wang-luo-gao-shou/">
        </link>
        <updated>2020-09-17T08:39:44.000Z</updated>
        <content type="html"><![CDATA[<p>1）什么是链接？</p>
<p>链接是指两个设备之间的连接。它包括用于一个设备能够与另一个设备通信的电缆类型和协议。</p>
<p>2）OSI 参考模型的层次是什么？</p>
<p>有 7 个 OSI 层：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p>
<p>3）什么是骨干网？</p>
<p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p>
<p>4）什么是 LAN？</p>
<p>LAN 是局域网的缩写。它是指计算机与位于小物理位置的其他网络设备之间的连接。</p>
<p>5）什么是节点？</p>
<p>节点是指连接发生的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p>
<p>6）什么是路由器？</p>
<p>路由器可以连接两个或更多网段。这些是在其路由表中存储信息的智能网络设备，例如路径，跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。路由器在 OSI 网络层运行。</p>
<p>7）什么是点对点链接？</p>
<p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的 NIC卡之外，点对点连接不需要任何其他网络设备。</p>
<p>8）什么是匿名 FTP？</p>
<p>匿名 FTP 是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p>
<p>9）什么是子网掩码？</p>
<p>子网掩码与 IP 地址组合，以识别两个部分：扩展网络地址和主机地址。像 IP 地址一样，子网掩码由 32 位组成。</p>
<p>10）UTP 电缆允许的最大长度是多少？</p>
<p>UTP 电缆的单段具有 90 到 100 米的允许长度。这种限制可以通过使用中继器和开关来克服</p>
<p>11）什么是数据封装？</p>
<p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p>
<p>12）描述网络拓扑</p>
<p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p>
<p>13）什么是 VPN？</p>
<p>VPN 意味着虚拟专用网络，这种技术允许通过网络（如 Internet）创建安全通道。</p>
<p>例如，VPN 允许您建立到远程服务器的安全拨号连接。</p>
<p>14）简要描述 NAT。</p>
<p>NAT 是网络地址转换。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到 Internet 的单一连接。</p>
<p>15）OSI 参考模型下网络层的工作是什么？</p>
<p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p>
<p>16）网络拓扑如何影响您在建立网络时的决策？</p>
<p>网络拓扑决定了互连设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p>
<p>17）什么是 RIP？</p>
<p>RIP，路由信息协议的简称由路由器用于将数据从一个网络发送到另一个网络。</p>
<p>它通过将其路由表广播到网络中的所有其他路由器来有效地管理路由数据。它以跳数为单位确定网络距离。</p>
<p>18）什么是不同的方式来保护计算机网络？</p>
<p>有几种方法可以做到这一点。在所有计算机上安装可靠和更新的防病毒程序。确保防火墙的设置和配置正确。用户认证也将有很大的帮助。所有这些组合将构成一个高度安全的网络。</p>
<p>19）什么是 NIC？</p>
<p>NIC 是网络接口卡（网卡）的缩写。这是连接到 PC 以连接到网络沈北。每个 NIC都有自己的 MAC 地址，用于标识网络上的 PC。</p>
<p>20）什么是 WAN？</p>
<p>WAN 代表广域网。它是地理上分散的计算机和设备的互连。它连接位于不同地区和国家/地区的网络。</p>
<p>21）OSI 物理层的重要性是什么？</p>
<p>物理层进行从数据位到电信号的转换，反之亦然。这是网络设备和电缆类型的考虑和设置。</p>
<p>22）TCP/IP 下有多少层？</p>
<p>有四层：网络层，互联网层，传输层和应用层。</p>
<p>23）什么是代理服务器，它们如何保护计算机网络？</p>
<p>代理服务器主要防止外部用户识别内部网络的 IP 地址。不知道正确的 IP 地址，甚至无法识别网络的物理位置。代理服务器可以使外部用户几乎看不到网络。</p>
<p>24）OSI 会话层的功能是什么？</p>
<p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p>
<p>25）实施容错系统的重要性是什么？有限吗？</p>
<p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。但是，在某些情况下，这种类型的系统将无法保护数据，例如意外删除。</p>
<p>26）10Base-T 是什么意思？</p>
<p>10 是指数据传输速率，在这种情况下是 10Mbps。“Base”是指基带。T 表示双绞线，这是用于该网络的电缆。</p>
<p>27）什么是私有 IP 地址？</p>
<p>专用 IP 地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有 IP 地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p>
<p>28）什么是 NOS？</p>
<p>NOS 或网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p>
<p>29）什么是 DoS？</p>
<p>DoS 或拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p>
<p>30）什么是 OSI，它在电脑网络中扮演什么角色？</p>
<p>OSI（开放系统互连）作为数据通信的参考模型。它由 7 层组成，每层定义了网络设备如何相互连接和通信的特定方面。一层可以处理所使用的物理介质，而另一层则指示如何通过网络实际传输数据。</p>
<p>31）电缆被屏蔽并具有双绞线的目的是什么？</p>
<p>其主要目的是防止串扰。串扰是电磁干扰或噪声，可能影响通过电缆传输的数据。</p>
<p>32）地址共享的优点是什么？</p>
<p>通过使用地址转换而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共 IP 地址，而不是内部网络上的私有 IP 地址。</p>
<p>33）什么是 MAC 地址？</p>
<p>MAC 或媒介访问控制，可以唯一地标识网络上的设备。它也被称为物理地址或以太网地址。MAC 地址由 6 个字节组成。</p>
<p>34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？</p>
<p>TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。</p>
<p>35）如何识别给定 IP 地址的 IP 类？</p>
<p>通过查看任何给定 IP 地址的第一个八位字节，您可以识别它是 A 类，B 类还是 C类。如果第一个八位字节以 0 位开头，则该地址为 Class A.如果以位 10 开头，则该地址为 B 类地址。如果从 110 开始，那么它是 C 类网络。</p>
<p>36）OSPF 的主要目的是什么？</p>
<p>OSPF 或开放最短路径优先，是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p>
<p>37）什么是防火墙？</p>
<p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客谁想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p>
<p>38）描述星形拓扑</p>
<p>星形拓扑由连接到节点的中央集线器组成。这是最简单的设置和维护之一。</p>
<p>39）什么是网关？</p>
<p>网关提供两个或多个网段之间的连接。它通常是运行网关软件并提供翻译服务的计算机。该翻译是允许不同系统在网络上通信的关键。</p>
<p>40）星型拓扑的缺点是什么？</p>
<p>星形拓扑的一个主要缺点是，一旦中央集线器或交换机被损坏，整个网络就变得不可用了。</p>
<p>41）什么是 SLIP？</p>
<p>SLIP 或串行线路接口协议实际上是在 UNIX 早期开发的旧协议。这是用于远程访问的协议之一。</p>
<p>42）给出一些私有网络地址的例子。</p>
<p>10.0.0.0，子网掩码为 255.0.0.0</p>
<p>172.16.0.0，子网掩码为 255.240.0.0</p>
<p>千人ccie认证交流群463904693</p>
<p>领取最新CCIE考试题库</p>
<p>CCIE 认证经验分享千人群：463904693</p>
<p>192.168.0.0，子网掩码为 255.255.0.0</p>
<p>43）什么是 tracert？</p>
<p>Tracert 是一个 Windows 实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p>
<p>44）网络管理员的功能是什么？</p>
<p>网络管理员有许多责任，可以总结为 3 个关键功能：安装网络，配置网络设置以及网络的维护/故障排除。</p>
<p>45）描述对等网络的一个缺点。</p>
<p>当您正在访问由网络上的某个工作站共享的资源时，该工作站的性能会降低。</p>
<p>46）什么是混合网络？</p>
<p>混合网络是利用客户端 - 服务器和对等体系结构的网络设置。</p>
<p>47）什么是 DHCP？</p>
<p>DHCP 是动态主机配置协议的缩写。其主要任务是自动为网络上的设备分配 IP 地址。它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p>
<p>48）ARP 的主要工作是什么？</p>
<p>ARP 或地址解析协议的主要任务是将已知的 IP 地址映射到 MAC 层地址。</p>
<p>49）什么是 TCP/IP？</p>
<p>TCP/IP 是传输控制协议/互联网协议的缩写。这是一组协议层，旨在在不同类型的计算机网络（也称为异构网络）上进行数据交换。</p>
<p>50）如何使用路由器管理网络？</p>
<p>路由器内置了控制台，可让您配置不同的设置，如安全和数据记录。您可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的某一天的特定时间。</p>
<p>您甚至可以对整个网络中看不到的网站施加限制。</p>
<p>51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？</p>
<p>使用 FTP（文件传输协议）在这些不同的服务器之间进行文件传输。这是可能的，因为 FTP 是平台无关的。</p>
<p>52）默认网关的使用是什么？</p>
<p>默认网关提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p>
<p>53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？</p>
<p>良好的密码不仅由字母组成，还包括字母和数字的组合。结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期，姓名，收藏夹等等。</p>
<p>54）UTP 电缆的正确终止率是多少？</p>
<p>非屏蔽双绞线网线的正常终止是 100 欧姆。</p>
<p>55）什么是 netstat？</p>
<p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p>
<p>56）C 类网络中的网络 ID 数量是多少？</p>
<p>对于 C 类网络，可用的网络 ID 位数为 21。可能的网络 ID 数目为 2，提高到 21或 2,097,152。每个网络 ID 的主机 ID 数量为 2，增加到 8 减去 2，或 254。</p>
<p>57）使用长于规定长度的电缆时会发生什么？</p>
<p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p>
<p>58）什么常见的软件问题可能导致网络缺陷？</p>
<p>软件相关问题可以是以下任何一种或其组合：</p>
<ul>
<li>
<p>客户端服务器问题</p>
</li>
<li>
<p>应用程序冲突</p>
</li>
<li>
<p>配置错误</p>
</li>
<li>
<p>协议不匹配</p>
</li>
<li>
<p>安全问题</p>
</li>
<li>
<p>用户政策和权利问题</p>
</li>
</ul>
<p>59）什么是 ICMP？</p>
<p>ICMP 是 Internet 控制消息协议。它为 TCP/IP 协议栈内的协议提供消息传递和通信。这也是管理由 PING 等网络工具使用的错误信息的协议。</p>
<p>60）什么是 Ping？</p>
<p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其IP 地址或设备名称（如计算机名称）ping 设备。</p>
<p>61）什么是点对点（P2P）？</p>
<p>对等是不在服务器上回复的网络。该网络上的所有 PC 都是单独的工作站。</p>
<p>62）什么是 DNS？</p>
<p>DNS 是域名系统。该网络服务的主要功能是为 TCP/IP 地址解析提供主机名。</p>
<p>63）光纤与其他介质有什么优势？</p>
<p>光纤的一个主要优点是不太容易受到电气干扰。它还支持更高的带宽，意味着可以发送和接收更多的数据。长距离信号降级也非常小。</p>
<p>64）集线器和交换机有什么区别？</p>
<p>集线器充当多端口中继器。然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期有高流量时。</p>
<p>65）Windows RRAS 服务支持的不同网络协议是什么？</p>
<p>支持三种主要的网络协议：NetBEUI，TCP/IP 和 IPX。</p>
<p>66）A，B 和 C 类网络中的最大网络和主机是什么？</p>
<p>对于 A 类，有 126 个可能的网络和 16,777,214 个主机</p>
<p>对于 B 类，有 16,384 个可能的网络和 65,534 个主机</p>
<p>对于 C 类，有 2,097,152 个可能的网络和 254 个主机</p>
<p>67）直通电缆的标准颜色顺序是什么？</p>
<p>橙色/白色，橙色，绿色/白色，蓝色，蓝色/白色，绿色，棕色/白色，棕色。</p>
<p>68）什么协议落在 TCP/IP 协议栈的应用层之下？</p>
<p>以下是 TCP/IP 应用层协议：FTP，TFTP，Telnet 和 SMTP。</p>
<p>69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？</p>
<p>是的，您可以使用一根电缆将两台计算机连接在一起。在这种情况下可以使用交叉型电缆。在这种设置中，一条电缆的数据传输引脚连接到另一条电缆的数据接收引脚，反之亦然。</p>
<p>70）什么是 ipconfig？</p>
<p>Ipconfig 是一个常用于识别网络上计算机的地址信息的实用程序。它可以显示物理地址以及 IP 地址。</p>
<p>71）直通和交叉电缆有什么区别？</p>
<p>直通电缆用于将计算机连接到交换机，集线器或路由器。交叉电缆用于将两个类似设备连接在一起，如 PC 到 PC 或集线器到集线器。</p>
<p>72）什么是客户端/服务器？</p>
<p>客户端/服务器是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件。客户端是指访问服务器的工作站。</p>
<p>73）描述网络。</p>
<p>网络是指用于数据通信的计算机和外围设备之间的互连。可以使用有线电缆或通过无线链路进行网络连接。</p>
<p>74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？</p>
<p>是的，那是因为 MAC 地址是硬连线到 NIC 电路，而不是 PC。这也意味着当 NIC卡被另一个替换时，PC 可以具有不同的 MAC 地址。</p>
<p>75）解释聚类支持</p>
<p>群集支持是指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的是在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p>
<p>76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</p>
<p>必须在所有服务器和工作站上安装防病毒程序，以确保保护。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p>
<p>77）描述以太网。</p>
<p>以太网是当今使用的流行网络技术之一。它是在 20 世纪 70 年代初开发的，并且基于 IEEE 中规定的规范。以太网在局域网中使用。</p>
<p>78）实现环形拓扑有什么缺点？</p>
<p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p>
<p>79）CSMA/CD 和 CSMA/CA 有什么区别？</p>
<p>CSMA/CD 或碰撞检测，每当碰撞发生时重新发送数据帧。CSMA/CA 或碰撞避免，将首先在数据传输之前广播意图发送。</p>
<p>80）什么是 SMTP？</p>
<p>SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。</p>
<p>81）什么是组播路由？</p>
<p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p>
<p>82）加密在网络上的重要性是什么？</p>
<p>加密是将信息转换成用户不可读的代码的过程。然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p>
<p>83）如何安排和显示 IP 地址？</p>
<p>IP 地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是 192.168.101.2</p>
<p>84）解释认证的重要性。</p>
<p>认证是在用户登录网络之前验证用户凭据的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p>
<p>85）隧道模式是什么意思？</p>
<p>这是一种数据交换模式，其中两个通信计算机本身不使用 IPSec。相反，将 LAN连接到中转网络的网关创建了一个使用 IPSec 协议来保护通过它的所有通信的虚拟隧道。</p>
<p>86）建立 WAN 链路涉及的不同技术有哪些？</p>
<p>模拟连接 - 使用常规电话线；数字连接 - 使用数字电话线；交换连接 - 使用发送方和接收方之间的多组链接来移动数据。</p>
<p>87）网格拓扑的一个优点是什么？</p>
<p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是最容错的网络拓扑之一。</p>
<p>88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</p>
<p>大部分网络由硬件组成。这些领域的问题可能包括硬盘故障，NIC 损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p>
<p>89）可以做什么来修复信号衰减问题？</p>
<p>处理这种问题的常见方法是使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p>
<p>90）动态主机配置协议如何协助网络管理？</p>
<p>网络管理员不必访问每台客户端计算机来配置静态 IP 地址，而是可以应用动态主机配置协议来创建称为可以动态分配给客户端的范围的 IP 地址池。</p>
<p>91）解释网络概念的概况？</p>
<p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户置于组中的配置文件。</p>
<p>92）什么是 Sneakernet？</p>
<p>Sneakernet 被认为是最早的联网形式，其中使用可移动介质（如磁盘，磁带）物理传输数据。</p>
<p>93）IEEE 在计算机网络中的作用是什么？</p>
<p>IEEE 或电气和电子工程师学会是由电气和电子设备标准发布和管理的工程师组成的组织。这包括网络设备，网络接口，cablings 和连接器。</p>
<p>94）TCP/IP Internet 层下有哪些协议？</p>
<p>该层管理的协议有 4 种。这些是 ICMP，IGMP，IP 和 ARP。</p>
<p>95）谈到网络，什么是权限？</p>
<p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p>
<p>96）建立 VLAN 的一个基本要求是什么？</p>
<p>需要一个 VLAN，因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的 VLAN 有助于在交换机级别创建单独的广播域。它用于安全目的。</p>
<p>97）什么是 IPv6？</p>
<p>IPv6 或 Internet 协议版本 6 被开发以替代 IPv4。目前，IPv4 正在用于控制互联网流量，但 IPv4 已经饱和。IPv6 能够克服这个限制。</p>
<p>98）什么是 RSA 算法？</p>
<p>RSA 是 Rivest-Shamir-Adleman 算法的缩写。它是目前最常用的公钥加密算法。</p>
<p>99）什么是网格拓扑？</p>
<p>网格拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p>
<p>100）100Base-FX 网络的最大段长度是多少？</p>
<p>使用 100Base-FX 的网段的最大允许长度为 412 米。整个网络的最大长度为 5 公里。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring面试]]></title>
        <id>https://maodinghuan.github.io/post/spring-mian-shi/</id>
        <link href="https://maodinghuan.github.io/post/spring-mian-shi/">
        </link>
        <updated>2020-09-17T08:38:44.000Z</updated>
        <content type="html"><![CDATA[<p>1.什么是spring?</p>
<p>Spring是一个轻量级Java开发框架，最早有Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。</p>
<p>Spring最根本的使命是解决企业级应用开发的复杂性，即简化Java开发。</p>
<p>Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，DI）和面向切面编程（aspect-oriented programming，AOP）。</p>
<p>为了降低Java开发的复杂性，Spring采取了以下4种关键策略</p>
<pre><code>基于POJO的轻量级和最小侵入性编程；
通过依赖注入和面向接口实现松耦合；
基于切面和惯例进行声明式编程；
通过切面和模板减少样板式代码。
</code></pre>
<p>2.Spring框架的设计目标，设计理念，和核心是什么</p>
<p>Spring设计目标：Spring为开发者提供一个一站式轻量级应用开发平台；</p>
<p>Spring设计理念：在JavaEE开发中，支持POJO和JavaBean开发方式，使应用面向接口开发，充分支持OO（面向对象）设计方法；Spring通过IoC容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给IoC容器，实现解耦；</p>
<p>Spring框架的核心：IoC容器和AOP模块。通过IoC容器管理POJO对象以及他们之间的耦合关系；通过AOP以动态非侵入的方式增强服务。</p>
<p>IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。</p>
<p>3.Spring的优缺点是什么？</p>
<p>优点</p>
<pre><code>方便解耦，简化开发

Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。

AOP编程的支持

Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。

声明式事务的支持

只需要通过配置就可以完成对事务的管理，而无需手动编程。

方便程序的测试

Spring对Junit4支持，可以通过注解方便的测试Spring程序。

方便集成各种优秀框架

Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。

降低JavaEE API的使用难度

Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。
</code></pre>
<p>缺点</p>
<pre><code>Spring明明一个很轻量级的框架，却给人感觉大而全
Spring依赖反射，反射影响性能
使用门槛升高，入门Spring需要较长时间
</code></pre>
<p>4.Spring 框架中都用到了哪些设计模式？</p>
<pre><code>工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；
单例模式：Bean默认为单例模式。
代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；
模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。
观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。
</code></pre>
<p>5.什么是Spring的依赖注入？</p>
<p>控制反转IoC是一个很大的概念，可以用不同的方式来实现。其主要实现方式有两种：依赖注入和依赖查找</p>
<p>依赖注入：相对于IoC而言，依赖注入(DI)更加准确地描述了IoC的设计理念。所谓依赖注入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。</p>
<p>6.依赖注入的基本原则</p>
<p>依赖注入的基本原则是：应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由IoC容器负责，“查找资源”的逻辑应该从应用组件的代码中抽取出来，交给IoC容器负责。容器全权负责组件的装配，它会把符合依赖关系的对象通过属性（JavaBean中的setter）或者是构造器传递给需要的对象。<br>
依赖注入有什么优势</p>
<p>依赖注入之所以更流行是因为它是一种更可取的方式：让容器全权负责依赖查询，受管组件只需要暴露JavaBean的setter方法或者带参数的构造器或者接口，使容器可以在初始化时组装对象的依赖关系。其与依赖查找方式相比，主要优势为：</p>
<pre><code>查找定位操作与应用代码完全无关。
不依赖于容器的API，可以很容易地在任何容器以外使用应用对象。
不需要特殊的接口，绝大多数对象可以做到完全不必依赖容器。
</code></pre>
<p>7.有哪些不同类型的依赖注入实现方式？<br>
依赖注入是时下最流行的IoC实现方式，依赖注入分为接口注入（Interface Injection），Setter方法注入（Setter Injection）和构造器注入（Constructor Injection）三种方式。其中接口注入由于在灵活性和易用性比较差，现在从Spring4开始已被废弃。</p>
<p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。</p>
<p>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[消息中间件MQ与RabbitMQ面试题]]></title>
        <id>https://maodinghuan.github.io/post/xiao-xi-zhong-jian-jian-mq-yu-rabbitmq-mian-shi-ti/</id>
        <link href="https://maodinghuan.github.io/post/xiao-xi-zhong-jian-jian-mq-yu-rabbitmq-mian-shi-ti/">
        </link>
        <updated>2020-09-17T08:38:20.000Z</updated>
        <content type="html"><![CDATA[<p>1.为什么使用MQ？MQ的优点</p>
<p>简答</p>
<pre><code>异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。
应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。
流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。
日志处理 - 解决大量日志传输。
消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。
</code></pre>
<p>详答</p>
<p>主要是：解耦、异步、削峰。</p>
<p>解耦：A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃…A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p>
<p>就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦。</p>
<p>异步：A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求。如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms。</p>
<p>削峰：减少高峰时期对服务器压力。<br>
2.消息队列有什么优缺点？RabbitMQ有什么优缺点？</p>
<p>优点上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰。</p>
<p>缺点有以下几个：</p>
<p>系统可用性降低</p>
<p>本来系统运行好好的，现在你非要加入个消息队列进去，那消息队列挂了，你的系统不是呵呵了。因此，系统可用性会降低；</p>
<p>系统复杂度提高</p>
<p>加入了消息队列，要多考虑很多方面的问题，比如：一致性问题、如何保证消息不被重复消费、如何保证消息可靠性传输等。因此，需要考虑的东西更多，复杂性增大。</p>
<p>一致性问题</p>
<p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p>
<p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。<br>
你们公司生产环境用的是什么消息中间件？</p>
<p>这个首先你可以说下你们公司选用的是什么消息中间件，比如用的是RabbitMQ，然后可以初步给一些你对不同MQ中间件技术的选型分析。</p>
<p>举个例子：比如说ActiveMQ是老牌的消息中间件，国内很多公司过去运用的还是非常广泛的，功能很强大。</p>
<p>但是问题在于没法确认ActiveMQ可以支撑互联网公司的高并发、高负载以及高吞吐的复杂场景，在国内互联网公司落地较少。而且使用较多的是一些传统企业，用ActiveMQ做异步调用和系统解耦。</p>
<p>然后你可以说说RabbitMQ，他的好处在于可以支撑高并发、高吞吐、性能很高，同时有非常完善便捷的后台管理界面可以使用。</p>
<p>另外，他还支持集群化、高可用部署架构、消息高可靠支持，功能较为完善。</p>
<p>而且经过调研，国内各大互联网公司落地大规模RabbitMQ集群支撑自身业务的case较多，国内各种中小型互联网公司使用RabbitMQ的实践也比较多。</p>
<p>除此之外，RabbitMQ的开源社区很活跃，较高频率的迭代版本，来修复发现的bug以及进行各种优化，因此综合考虑过后，公司采取了RabbitMQ。</p>
<p>但是RabbitMQ也有一点缺陷，就是他自身是基于erlang语言开发的，所以导致较为难以分析里面的源码，也较难进行深层次的源码定制和改造，毕竟需要较为扎实的erlang语言功底才可以。</p>
<p>然后可以聊聊RocketMQ，是阿里开源的，经过阿里的生产环境的超高并发、高吞吐的考验，性能卓越，同时还支持分布式事务等特殊场景。</p>
<p>而且RocketMQ是基于Java语言开发的，适合深入阅读源码，有需要可以站在源码层面解决线上生产问题，包括源码的二次开发和改造。</p>
<p>另外就是Kafka。Kafka提供的消息中间件的功能明显较少一些，相对上述几款MQ中间件要少很多。</p>
<p>但是Kafka的优势在于专为超高吞吐量的实时日志采集、实时数据同步、实时数据计算等场景来设计。</p>
<p>因此Kafka在大数据领域中配合实时计算技术（比如Spark Streaming、Storm、Flink）使用的较多。但是在传统的MQ中间件使用场景中较少采用。</p>
<p>3.RabbitMQ基本概念</p>
<pre><code>Broker： 简单来说就是消息队列服务器实体
Exchange： 消息交换机，它指定消息按什么规则，路由到哪个队列
Queue： 消息队列载体，每个消息都会被投入到一个或多个队列
Binding： 绑定，它的作用就是把exchange和queue按照路由规则绑定起来
Routing Key： 路由关键字，exchange根据这个关键字进行消息投递
VHost： vhost 可以理解为虚拟 broker ，即 mini-RabbitMQ server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。
Producer： 消息生产者，就是投递消息的程序
Consumer： 消息消费者，就是接受消息的程序
Channel： 消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务
</code></pre>
<p>由Exchange、Queue、RoutingKey三个才能决定一个从Exchange到Queue的唯一的线路。<br>
4.如何保证RabbitMQ消息的顺序性？</p>
<p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云服务器安装mysql怎么远程连接]]></title>
        <id>https://maodinghuan.github.io/post/yun-fu-wu-qi-an-zhuang-mysql-zen-me-yuan-cheng-lian-jie/</id>
        <link href="https://maodinghuan.github.io/post/yun-fu-wu-qi-an-zhuang-mysql-zen-me-yuan-cheng-lian-jie/">
        </link>
        <updated>2020-09-17T08:37:54.000Z</updated>
        <content type="html"><![CDATA[<p>我搞了这东西很久 ，所以我不希望你们像我一样踩坑.........................<br>
第一步：<br>
首先要确保你的云服务器开启了3306端口，这个是要去登入云服务器控制台开启的，设置安全组<br>
第二步：<br>
1.使用yum下载mysql以及需要的相关插件<br>
yum -y install make gcc-c++ mysql mysql-devel mysql-server<br>
2.启动MySQL<br>
service mysqld start<br>
3.登录mysql<br>
mysql -uroot -p<br>
4.远程登入授权<br>
use mysql;<br>
update user set host = '%' where user = 'root';<br>
flush privileges;</p>
<pre><code>如果不放心是否修改成功，那就执行
select user,host from user;
查看是否修改成功
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://maodinghuan.github.io/post-images/1600389264374.png" alt="" loading="lazy"></figure>
<p>ps:设置mysql登入密码：mysqladmin -u root -p password &quot;root&quot;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识物联网]]></title>
        <id>https://maodinghuan.github.io/post/chu-shi-wu-lian-wang/</id>
        <link href="https://maodinghuan.github.io/post/chu-shi-wu-lian-wang/">
        </link>
        <updated>2020-09-17T08:37:34.000Z</updated>
        <content type="html"><![CDATA[<p>1.什么是物联网？<br>
物联网（The Internet of Things，简称IOT）是指通过 各种信息传感器、射频识别技术、全球定位系统、红外感应器、激光扫描器等各种装置与技术，实时采集任何需要监控、 连接、互动的物体或过程，采集其声、光、热、电、力学、化 学、生物、位置等各种需要的信息，通过各类可能的网络接入，实现物与物、物与人的泛在连接，实现对物品和过程的智能化感知、识别和管理。物联网是一个基于互联网、传统电信网等的信息承载体，它让所有能够被独立寻址的普通物理对象形成互联互通的网络。</p>
<p>2.物联网的由来？<br>
嗯.......来自于一个咖啡壶时间，然后......2005年正式提出此概念，具体由来去万能的百度啦....</p>
<p>3.物联网的基础架构？<br>
三层：感知层、网络层、应用层</p>
<p>4.物联网的应用场景？<br>
4.1智慧城市<br>
智慧城市发展理念、建设思路、实施路径、运行模式、技术手段的全方位迭代升级，进入以人为本、成效导向、统筹集约、协同创新的新型智慧城市发展阶段，进一步强化城市智能设施统筹布局和共性平台建设，破除数据孤岛，加强城乡统筹城市治理智能化随着人工智能技术进一步成熟，利用大数据技术对海量的城市基础设施状态数据和运行数据进行数据挖掘和分析，将加速渗透到智慧城市各领域，实现城市运行状态的智能感知和智能决策公共服务透明化以信息化、智能化方式实现网上办事与行政审批过程的全程跟踪、全程留痕、全程监督，探索模块化审批、容缺预审、限时审批相结合的全并联审批，形成新型智慧城市高效透明营商环境<br>
基础设施集约化基于云设施实现统筹布局，形成核心平台的可重用、可扩展架构，为各类智慧应用系统提供一体化协同管理和服务能力，实现平台与应用松耦合<br>
4.2智能家居<br>
智能家居就是物联网在家庭中的基础应用，随着宽带业务的普及，智能家居产品涉及到方方面面。 家中无人，可利用手机等产品客户端远程操作智能空调，调节室温，甚者还可以学习用户的使用习惯，从而实现全自动的温控操作，使用户在炎炎夏季回家就能享受到冰爽带来的惬意;通过客户端实现智能灯泡的开关、调控灯泡的亮度和颜色等等; 插座内置Wifi，可实现遥控插座定时通断电流，甚者可以监测设备用电情况，生成用电图表让你对用电情况一目了然，安排资源使用及开支预算;智能体重秤，监测运动效果。内置可以监测血压、脂肪量的先进传感器，内定程序根据身体状态提出健康建议; 智能牙刷与客户端相连，供刷牙时间、刷牙位置提醒，可根据刷牙的数据生产图表，口腔的健康状况; 智能摄像头、窗户传感器、智能门铃、烟雾探测器、智能报警器等都是家庭不可少的安全监控设备，你及时出门在外，以在任意时间、地方查看家中任何一角的实时状况，任何安全隐患。看似繁琐的种种家居生活因为物联网变得更加轻松、美好 。<br>
4.4智能交通<br>
物联网技术在道路交通方面的应用比较成熟。随着社会车辆越来越普及，交通拥堵甚至瘫痪已成为城市的一大问题。对道路交通状况实时监控并将信息及时传递给驾驶人，让驾驶人及时作出出行调整，有效缓解了交通压力；高速路口设置道路自动收费系统(简称ETC)，免去进出口取卡、还卡的时间，提升车辆的通行效率;公交车上安装定位系统，能及时了解公交车行驶路线及到站时间，乘客可以根据搭乘路线确定出行，免去不必要的时间浪费。 社会车辆增多，除了会带来交通压力外，停车难也日益成为一个突出问题，不少城市推出了智慧路边停车管理系统，该系统基于云计算平台，结合物联网技术与移动支付技术，共享车位资源，提高车位利用率和用户的方便程度。该系统可以兼容手机模式和射频识别模式，通过手机端APP软件可以实现及时了解车位信息、车位位置，提前做好预定并实现交费等等操作，很大程度上解决了“停车难、难停车”的问题  。<br>
4.5公共安全<br>
近年来全球气候异常情况频发，灾害的突发性和危害性进一步加大，互联网可以实时监测环境的不安全性情况，提前预防、实时预警、及时采取应对措施，降低灾害对人类生命财产的威胁。 美国布法罗大学早在 2013 年就提出研究深海互联网项目，通过特殊处理的感应装置置于深海处，分析水下相关情况，海洋污染的防治、海底资源的探测、甚至对海啸也可以提供更加可靠的预警。该项目在当地湖水中进行试验，获得成功，为进一步扩大使用范围提供了基础。利用物联网技术可以智能感知大气、土壤、森林、水资源等方面各指标数据，对于改善人类生活环境发挥巨大作用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云服务器安装docker]]></title>
        <id>https://maodinghuan.github.io/post/yun-fu-wu-qi-an-zhuang-docker/</id>
        <link href="https://maodinghuan.github.io/post/yun-fu-wu-qi-an-zhuang-docker/">
        </link>
        <updated>2020-09-17T08:37:06.000Z</updated>
        <content type="html"><![CDATA[<p><strong>安装要求：</strong><br>
1.Docker只支持64位CPU架构的计算机，目前不支持32位CPU；<br>
2.建议系统的Linux内核版本为3.10及以上；<br>
<strong>内核检查</strong><br>
uname -r<br>
通过uname -r来检查自己的内核是否是3.x及以上，如果是3.x以下的版本需要升级内核;<br>
内核升级步骤请百度<br>
<strong>Docker安装</strong><br>
安装一些必要的系统工具：<br>
sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>
添加软件源信息：<br>
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>
更新 yum 缓存：<br>
sudo yum makecache fast<br>
安装 Docker-ce：<br>
sudo yum -y install docker-ce</p>
<p>**注意：sudo yum -y install docker-ce  这一步可能会报错：<br>
Error:<br>
Problem: package docker-ce-3:19.03.6-3.el7.x86_64 requires containerd.io&gt;=1.2.2-3, but none of the providers can be installed</p>
<ul>
<li>cannot install the best candidate for the job**</li>
</ul>
<p>处理方法：<br>
更新containerd.io版本<br>
wget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm<br>
yum -y install containerd.io-1.2.6-3.3.el7.x86_64.rpm　//升级containerd.io软件包</p>
<p>启动 Docker 后台服务:<br>
sudo systemctl start docker<br>
测试运行 hello-world<br>
docker run hello-world</p>
<p>OK!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java面试之redis]]></title>
        <id>https://maodinghuan.github.io/post/java-mian-shi-zhi-redis/</id>
        <link href="https://maodinghuan.github.io/post/java-mian-shi-zhi-redis/">
        </link>
        <updated>2020-09-01T08:39:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1.什么是redis？</strong><br>
Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。</p>
<p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>
<p>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。<br>
<strong>2.redis有哪些优缺点？</strong><br>
优点<br>
读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。<br>
支持数据持久化，支持AOF和RDB两种持久化方式。<br>
支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。<br>
数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。<br>
支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。<br>
缺点<br>
数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。<br>
Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。<br>
主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。<br>
Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br>
<strong>3.为什么要用 Redis /为什么要用缓存</strong><br>
主要从“高性能”和“高并发”这两点来看待这个问题。<br>
高性能：</p>
<p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！<br>
<img src="https://maodinghuan.github.io/post-images/1600388810341.png" alt="" loading="lazy"><br>
高并发：</p>
<p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。<br>
<img src="https://maodinghuan.github.io/post-images/1600388821036.png" alt="" loading="lazy"><br>
<strong>4.redis为什么这么快？</strong><br>
1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；</p>
<p>2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p>
<p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p>
<p>4、使用多路 I/O 复用模型，非阻塞 IO；</p>
<p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；<br>
<strong>5.什么是Redis持久化？</strong><br>
持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p>
<p>持续更新中...................................</p>
]]></content>
    </entry>
</feed>